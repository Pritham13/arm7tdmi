$date
	Sun Dec 10 23:19:06 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ALU_tb $end
$var wire 1 ! result_writeback $end
$var wire 32 " result [31:0] $end
$var wire 1 # nzcv_writeback $end
$var wire 4 $ nzcv [3:0] $end
$var reg 4 % alu_control [3:0] $end
$var reg 32 & operand_a [31:0] $end
$var reg 32 ' operand_b [31:0] $end
$var reg 1 ( reset $end
$scope module uut $end
$var wire 4 ) alu_control [3:0] $end
$var wire 32 * operand_a [31:0] $end
$var wire 32 + operand_b [31:0] $end
$var wire 1 ( reset $end
$var reg 33 , acc [32:0] $end
$var reg 1 - carry_flag $end
$var reg 1 . negative_flag $end
$var reg 4 / nzcv [3:0] $end
$var reg 1 # nzcv_writeback $end
$var reg 1 0 overflow_flag $end
$var reg 32 1 result [31:0] $end
$var reg 1 ! result_writeback $end
$var reg 1 2 zero_flag $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
02
bx 1
00
b0 /
0.
0-
bx ,
b10100 +
b1010 *
bx )
1(
b10100 '
b1010 &
bx %
b0 $
x#
bx "
x!
$end
#10
b11110 "
b11110 1
b11110 ,
b0 $
b0 /
0-
00
b100 %
b100 )
0(
#20
b10100 "
b10100 1
b10 %
b10 )
b1010 '
b1010 +
b11110 &
b11110 *
#30
b100 $
b100 /
12
b0 "
b0 1
b0 %
b0 )
b101 '
b101 +
b1000 &
b1000 *
#40
b0 $
b0 /
02
b1000 "
b1000 1
b1 %
b1 )
b111 '
b111 +
b1111 &
b1111 *
#50
b1010 "
b1010 1
b11 %
b11 )
b10100 '
b10100 +
b1010 &
b1010 *
#60
b1 $
b1 /
10
b1111111111111111111111111111111 "
b1111111111111111111111111111111 1
b10000000000000000000000000000000 ,
b101 %
b101 )
b1 '
b1 +
b1111111111111111111111111111111 &
b1111111111111111111111111111111 *
#70
b1111111111111111111111111111011 "
b1111111111111111111111111111011 1
b110 %
b110 )
b101 '
b101 +
#80
b1011 "
b1011 1
b111 %
b111 )
b10100 '
b10100 +
b1010 &
b1010 *
#90
b101 $
b101 /
12
b1000 %
b1000 )
b0 '
b0 +
b0 &
b0 *
#100
b1001 %
b1001 )
b11111111 '
b11111111 +
b11111111 &
b11111111 *
#110
b0 $
b0 /
02
00
b1010 %
b1010 )
b11 '
b11 +
b101 &
b101 *
#120
b1011 %
b1011 )
b1 '
b1 +
b1111111111111111111111111111111 &
b1111111111111111111111111111111 *
#130
b11110 "
b11110 1
b1100 %
b1100 )
b10100 '
b10100 +
b1010 &
b1010 *
#140
b1101 %
b1101 )
b0 '
b0 +
b101010 &
b101010 *
#150
b10101010 "
b10101010 1
b1110 %
b1110 )
b1010101 '
b1010101 +
b11111111 &
b11111111 *
#160
b11111111111111111111111100000000 "
b11111111111111111111111100000000 1
b1111 %
b1111 )
b0 '
b0 +
#170
